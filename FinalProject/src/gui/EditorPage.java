/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import threads.MainHostThread;
import threads.ClientThread;
import java.util.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import threads.Sendable;

/**
 *
 * @author alber
 */
public class EditorPage extends javax.swing.JFrame {

    protected Boolean checkSave = false;
    protected boolean offline = true;
    protected File fileName;
    protected Sendable thread;
    protected int start, end;
    protected boolean selected = false;

    /**
     * Creates new form Main
     */
    public EditorPage() {
        initComponents();
    }

    public EditorPage(boolean host, Sendable s) throws UnknownHostException {
        this();
        offline = false;
        thread = s;
        if (host) {
            InetAddress ip = InetAddress.getLocalHost();
            connected.setText("You are currently hosting on " + ip.getHostAddress()
                    + ":" + MainHostThread.port + " with the password "
                    + MainHostThread.pass);
        } else {
            connected.setText("You are currently connected to "
                    + thread.nh.toString());
        }
    }

    public String getAllText() {
        return textArea.getText();
    }

    public void setAllText(String s) {
        textArea.setText(s);
    }

    public void insertText(String s, int pos) {
        textArea.insert(s, pos);
    }

    public void deleteChar(int pos) throws BadLocationException {
        String s = textArea.getText();
        textArea.setText(s.substring(0, pos) + s.substring(pos + 1, s.length()));
    }
    
    public void deleteSelection(int start, int end) {
        String s = textArea.getText();
        textArea.setText(s.substring(0, start) + s.substring(end, s.length()));
    }

    public void paste(String s, int pos) throws UnsupportedFlavorException, IOException {
        textArea.select(pos, pos - s.length());
        textArea.paste();
    }

    public void sendPaste(int pos) {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Clipboard cp = tk.getSystemClipboard();

        try {
            String s = (String) cp.getData(DataFlavor.stringFlavor);
            thread.sendText(s, pos);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        connected = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        jMenuItem8 = new mySaveButton();
        SaveAs = new javax.swing.JMenuItem();
        Quit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textAreaCaretUpdate(evt);
            }
        });
        textArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textAreaMouseClicked(evt);
            }
        });
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(textArea);

        connected.setText("You are currently in OFFLINE mode.");

        jMenu1.setText("File");

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        jMenu1.add(New);

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        jMenuItem8.setText("Save");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveAs.setText("Save As");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(SaveAs);

        Quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Quit.setText("Quit");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });
        jMenu1.add(Quit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Copy");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Cut");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Paste");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Select All");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connected)
                        .addGap(0, 613, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        // TODO add your handling code here:
        if (checkSave == false) {
            JOptionPane.showMessageDialog(null, "Please save first");
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_QuitActionPerformed

    class mySaveButton extends JMenuItem {

        public mySaveButton() {
            this.setEnabled(checkSave);
        }
    }


    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:

        BufferedWriter writer = null;

        try {
            writer = new BufferedWriter(new FileWriter(fileName));
            writer.write(textArea.getText());
        } catch (IOException err) {
            err.printStackTrace();
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
        EditorPage newPage = new EditorPage();
        newPage.setVisible(true);
        newPage.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }//GEN-LAST:event_NewActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:      
        final JFileChooser SaveAs = new JFileChooser();
        SaveAs.setApproveButtonText("Save As");
        int actionDialog = SaveAs.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }

        fileName = new File(SaveAs.getSelectedFile() + ".txt");
        BufferedWriter outFile = null;

        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            textArea.write(outFile);
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (outFile != null) {
                try {
                    outFile.close();
                } catch (IOException e) {
                }
            }
        }
        checkSave = true;
        jMenuItem8.setEnabled(checkSave);
    }//GEN-LAST:event_SaveAsActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser load = new JFileChooser();
            File selectedFile;
            BufferedReader in;
            FileReader reader = null;
            if (load.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                selectedFile = load.getSelectedFile();
                if (selectedFile.canRead() && selectedFile.exists()) {
                    reader = new FileReader(selectedFile);
                }
            }
            in = new BufferedReader(reader);

            String inputLine = in.readLine();
            while (inputLine != null) {
                Scanner sc = new Scanner(inputLine);
                textArea.append(inputLine + "\n");
                inputLine = in.readLine();
            }
            in.close();
        } catch (IOException ex) {
            textArea.append("Error Processing File:\n" + ex.getMessage() + "\n");
        } catch (NullPointerException ex) {
        }
        checkSave = true;
    }//GEN-LAST:event_OpenActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        textArea.selectAll();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        int pos = textArea.getCaretPosition();
        textArea.paste();

        if (offline) {
            return;
        }

        sendPaste(pos);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        textArea.cut();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        textArea.copy();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped
        // Sends character data; this is used instead of keyReleased because
        // keyReleased does not properly send the CaretPosition
        if (offline) {
            return;
        }

        int ascii_code = (int) evt.getKeyChar();

        if (ascii_code >= 32 && ascii_code <= 126 || ascii_code == 10) {
            if(selected) {
                thread.sendBackspace(start, end);
                thread.sendCharacter(evt.getKeyChar(), start);
                selected = false;
            }
            else
                thread.sendCharacter(evt.getKeyChar(), textArea.getCaretPosition());
        }
    }//GEN-LAST:event_textAreaKeyTyped

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased
        // Keyboard shortcuts and backspace commands are here because KeyTyped
        // only sends character data; it does NOT record what key is actually
        // pressed.
        if (offline) {
            return;
        }

        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if(selected) {
                thread.sendBackspace(start, end);
                selected = false;
            }
            else
                thread.sendBackspace(textArea.getCaretPosition());
        }
        else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
            sendPaste(textArea.getCaretPosition());
        else if (!evt.isShiftDown() && evt.isActionKey())
            selected = false;
    }//GEN-LAST:event_textAreaKeyReleased

    private void textAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textAreaCaretUpdate
        if(evt.getMark() != evt.getDot()) {
            selected = true;
            end = Math.max(evt.getDot(), evt.getMark());
            start = Math.min(evt.getDot(), evt.getMark());
        }
    }//GEN-LAST:event_textAreaCaretUpdate

    private void textAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseClicked
        if(!evt.isShiftDown())
            selected = false;
    }//GEN-LAST:event_textAreaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Quit;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JLabel connected;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
